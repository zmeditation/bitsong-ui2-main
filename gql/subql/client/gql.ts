/* eslint-disable */
import * as types from './graphql';
import type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "query GetFantokens($first: Int, $filter: FantokenFilter) {\n  fantokens(first: $first, filter: $filter, orderBy: CREATED_HEIGHT_DESC) {\n    edges {\n      cursor\n      node {\n        id\n        symbol\n        name\n        metadata {\n          image\n        }\n        supply\n        maxSupply\n      }\n    }\n  }\n}\n\nquery GetFantoken($denom: String!) {\n  fantoken(id: $denom) {\n    id\n    symbol\n    name\n    supply\n    maxSupply\n    authorityId\n    minterId\n    creatorId\n    uri\n    metadata {\n      image\n      biography\n      projectInfo\n      links\n    }\n    updatedHeight\n  }\n}\n\nquery GetCollections($first: Int) {\n  collections(first: $first, orderBy: CREATED_AT_DESC) {\n    totalCount\n    edges {\n      cursor\n      node {\n        id\n        name\n        image\n        verified\n      }\n    }\n  }\n}\n\nquery GetVerifiedCollections($first: Int) {\n  collections(\n    first: $first\n    orderBy: CREATED_AT_DESC\n    filter: {verified: {equalTo: true}}\n  ) {\n    totalCount\n    edges {\n      cursor\n      node {\n        id\n        name\n        image\n        verified\n      }\n    }\n  }\n}\n\nquery GetUnverifiedCollections($first: Int) {\n  collections(\n    first: $first\n    orderBy: CREATED_AT_DESC\n    filter: {verified: {equalTo: false}}\n  ) {\n    totalCount\n    edges {\n      cursor\n      node {\n        id\n        name\n        image\n        verified\n      }\n    }\n  }\n}\n\nquery GetCollectionsByUser($first: Int, $creator: String!) {\n  collections(\n    first: $first\n    orderBy: NAME_ASC\n    filter: {creatorId: {equalTo: $creator}}\n  ) {\n    totalCount\n    edges {\n      cursor\n      node {\n        id\n        name\n        image\n        verified\n      }\n    }\n  }\n}\n\nquery GetCollection($id: String!) {\n  collection(id: $id) {\n    id\n    image\n    cover\n    symbol\n    name\n    description\n    creatorId\n    adminId\n    verified\n    nfts(first: 100, orderBy: CREATED_AT_DESC) {\n      totalCount\n      edges {\n        node {\n          id\n          tokenId\n          collectionId\n          metadata {\n            name\n            image\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetNft($id: String!) {\n  nft(id: $id) {\n    tokenId\n    collectionId\n    minterId\n    ownerId\n    sellerFee\n    paymentAddress\n    metadata {\n      name\n      description\n      image\n      attributes\n    }\n    collection {\n      id\n      name\n      image\n      creatorId\n      nfts(first: 6, orderBy: CREATED_AT_DESC, filter: {id: {notEqualTo: $id}}) {\n        totalCount\n        edges {\n          node {\n            id\n            tokenId\n            collectionId\n            metadata {\n              name\n              image\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetAccount($id: String!) {\n  account(id: $id) {\n    id\n    nftsOwned {\n      totalCount\n    }\n    nftsMinted {\n      totalCount\n    }\n  }\n}\n\nquery GetAccountNftOwned($id: String!) {\n  account(id: $id) {\n    id\n    nftsOwned(first: 100, orderBy: CREATED_AT_DESC) {\n      totalCount\n      edges {\n        node {\n          id\n          tokenId\n          collectionId\n          metadata {\n            name\n            image\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetAccountNftMinted($id: String!) {\n  account(id: $id) {\n    id\n    nftsMinted(first: 100, orderBy: CREATED_AT_DESC) {\n      totalCount\n      edges {\n        node {\n          id\n          tokenId\n          collectionId\n          metadata {\n            name\n            image\n          }\n        }\n      }\n    }\n  }\n}\n\nquery LaunchpartyByCollection($address: String!) {\n  launchparties(filter: {collectionId: {equalTo: $address}}) {\n    totalCount\n    edges {\n      cursor\n      node {\n        id\n        collection {\n          id\n          verified\n        }\n        name\n        symbol\n        maxEditions\n        startTime\n        price\n        paymentAddress\n        sellerFeeBps\n        creator {\n          id\n          verified\n        }\n      }\n    }\n  }\n}": types.GetFantokensDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetFantokens($first: Int, $filter: FantokenFilter) {\n  fantokens(first: $first, filter: $filter, orderBy: CREATED_HEIGHT_DESC) {\n    edges {\n      cursor\n      node {\n        id\n        symbol\n        name\n        metadata {\n          image\n        }\n        supply\n        maxSupply\n      }\n    }\n  }\n}\n\nquery GetFantoken($denom: String!) {\n  fantoken(id: $denom) {\n    id\n    symbol\n    name\n    supply\n    maxSupply\n    authorityId\n    minterId\n    creatorId\n    uri\n    metadata {\n      image\n      biography\n      projectInfo\n      links\n    }\n    updatedHeight\n  }\n}\n\nquery GetCollections($first: Int) {\n  collections(first: $first, orderBy: CREATED_AT_DESC) {\n    totalCount\n    edges {\n      cursor\n      node {\n        id\n        name\n        image\n        verified\n      }\n    }\n  }\n}\n\nquery GetVerifiedCollections($first: Int) {\n  collections(\n    first: $first\n    orderBy: CREATED_AT_DESC\n    filter: {verified: {equalTo: true}}\n  ) {\n    totalCount\n    edges {\n      cursor\n      node {\n        id\n        name\n        image\n        verified\n      }\n    }\n  }\n}\n\nquery GetUnverifiedCollections($first: Int) {\n  collections(\n    first: $first\n    orderBy: CREATED_AT_DESC\n    filter: {verified: {equalTo: false}}\n  ) {\n    totalCount\n    edges {\n      cursor\n      node {\n        id\n        name\n        image\n        verified\n      }\n    }\n  }\n}\n\nquery GetCollectionsByUser($first: Int, $creator: String!) {\n  collections(\n    first: $first\n    orderBy: NAME_ASC\n    filter: {creatorId: {equalTo: $creator}}\n  ) {\n    totalCount\n    edges {\n      cursor\n      node {\n        id\n        name\n        image\n        verified\n      }\n    }\n  }\n}\n\nquery GetCollection($id: String!) {\n  collection(id: $id) {\n    id\n    image\n    cover\n    symbol\n    name\n    description\n    creatorId\n    adminId\n    verified\n    nfts(first: 100, orderBy: CREATED_AT_DESC) {\n      totalCount\n      edges {\n        node {\n          id\n          tokenId\n          collectionId\n          metadata {\n            name\n            image\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetNft($id: String!) {\n  nft(id: $id) {\n    tokenId\n    collectionId\n    minterId\n    ownerId\n    sellerFee\n    paymentAddress\n    metadata {\n      name\n      description\n      image\n      attributes\n    }\n    collection {\n      id\n      name\n      image\n      creatorId\n      nfts(first: 6, orderBy: CREATED_AT_DESC, filter: {id: {notEqualTo: $id}}) {\n        totalCount\n        edges {\n          node {\n            id\n            tokenId\n            collectionId\n            metadata {\n              name\n              image\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetAccount($id: String!) {\n  account(id: $id) {\n    id\n    nftsOwned {\n      totalCount\n    }\n    nftsMinted {\n      totalCount\n    }\n  }\n}\n\nquery GetAccountNftOwned($id: String!) {\n  account(id: $id) {\n    id\n    nftsOwned(first: 100, orderBy: CREATED_AT_DESC) {\n      totalCount\n      edges {\n        node {\n          id\n          tokenId\n          collectionId\n          metadata {\n            name\n            image\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetAccountNftMinted($id: String!) {\n  account(id: $id) {\n    id\n    nftsMinted(first: 100, orderBy: CREATED_AT_DESC) {\n      totalCount\n      edges {\n        node {\n          id\n          tokenId\n          collectionId\n          metadata {\n            name\n            image\n          }\n        }\n      }\n    }\n  }\n}\n\nquery LaunchpartyByCollection($address: String!) {\n  launchparties(filter: {collectionId: {equalTo: $address}}) {\n    totalCount\n    edges {\n      cursor\n      node {\n        id\n        collection {\n          id\n          verified\n        }\n        name\n        symbol\n        maxEditions\n        startTime\n        price\n        paymentAddress\n        sellerFeeBps\n        creator {\n          id\n          verified\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query GetFantokens($first: Int, $filter: FantokenFilter) {\n  fantokens(first: $first, filter: $filter, orderBy: CREATED_HEIGHT_DESC) {\n    edges {\n      cursor\n      node {\n        id\n        symbol\n        name\n        metadata {\n          image\n        }\n        supply\n        maxSupply\n      }\n    }\n  }\n}\n\nquery GetFantoken($denom: String!) {\n  fantoken(id: $denom) {\n    id\n    symbol\n    name\n    supply\n    maxSupply\n    authorityId\n    minterId\n    creatorId\n    uri\n    metadata {\n      image\n      biography\n      projectInfo\n      links\n    }\n    updatedHeight\n  }\n}\n\nquery GetCollections($first: Int) {\n  collections(first: $first, orderBy: CREATED_AT_DESC) {\n    totalCount\n    edges {\n      cursor\n      node {\n        id\n        name\n        image\n        verified\n      }\n    }\n  }\n}\n\nquery GetVerifiedCollections($first: Int) {\n  collections(\n    first: $first\n    orderBy: CREATED_AT_DESC\n    filter: {verified: {equalTo: true}}\n  ) {\n    totalCount\n    edges {\n      cursor\n      node {\n        id\n        name\n        image\n        verified\n      }\n    }\n  }\n}\n\nquery GetUnverifiedCollections($first: Int) {\n  collections(\n    first: $first\n    orderBy: CREATED_AT_DESC\n    filter: {verified: {equalTo: false}}\n  ) {\n    totalCount\n    edges {\n      cursor\n      node {\n        id\n        name\n        image\n        verified\n      }\n    }\n  }\n}\n\nquery GetCollectionsByUser($first: Int, $creator: String!) {\n  collections(\n    first: $first\n    orderBy: NAME_ASC\n    filter: {creatorId: {equalTo: $creator}}\n  ) {\n    totalCount\n    edges {\n      cursor\n      node {\n        id\n        name\n        image\n        verified\n      }\n    }\n  }\n}\n\nquery GetCollection($id: String!) {\n  collection(id: $id) {\n    id\n    image\n    cover\n    symbol\n    name\n    description\n    creatorId\n    adminId\n    verified\n    nfts(first: 100, orderBy: CREATED_AT_DESC) {\n      totalCount\n      edges {\n        node {\n          id\n          tokenId\n          collectionId\n          metadata {\n            name\n            image\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetNft($id: String!) {\n  nft(id: $id) {\n    tokenId\n    collectionId\n    minterId\n    ownerId\n    sellerFee\n    paymentAddress\n    metadata {\n      name\n      description\n      image\n      attributes\n    }\n    collection {\n      id\n      name\n      image\n      creatorId\n      nfts(first: 6, orderBy: CREATED_AT_DESC, filter: {id: {notEqualTo: $id}}) {\n        totalCount\n        edges {\n          node {\n            id\n            tokenId\n            collectionId\n            metadata {\n              name\n              image\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetAccount($id: String!) {\n  account(id: $id) {\n    id\n    nftsOwned {\n      totalCount\n    }\n    nftsMinted {\n      totalCount\n    }\n  }\n}\n\nquery GetAccountNftOwned($id: String!) {\n  account(id: $id) {\n    id\n    nftsOwned(first: 100, orderBy: CREATED_AT_DESC) {\n      totalCount\n      edges {\n        node {\n          id\n          tokenId\n          collectionId\n          metadata {\n            name\n            image\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetAccountNftMinted($id: String!) {\n  account(id: $id) {\n    id\n    nftsMinted(first: 100, orderBy: CREATED_AT_DESC) {\n      totalCount\n      edges {\n        node {\n          id\n          tokenId\n          collectionId\n          metadata {\n            name\n            image\n          }\n        }\n      }\n    }\n  }\n}\n\nquery LaunchpartyByCollection($address: String!) {\n  launchparties(filter: {collectionId: {equalTo: $address}}) {\n    totalCount\n    edges {\n      cursor\n      node {\n        id\n        collection {\n          id\n          verified\n        }\n        name\n        symbol\n        maxEditions\n        startTime\n        price\n        paymentAddress\n        sellerFeeBps\n        creator {\n          id\n          verified\n        }\n      }\n    }\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;